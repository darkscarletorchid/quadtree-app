{"version":3,"sources":["models/Rectangle.js","models/Quadtree.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","x","y","width","height","this","size","Quadtree","level","maxLevels","bounds","colorList","parent","getRandomInt","min","max","Math","ceil","floor","random","color","length","highlighted","children","direction","swapNodes","child1","child2","tmp0","tmp0pos","tmp3","tmp3pos","updatePositions","call","params","getChildParams","node","push","fill","stroke","forEach","el","updateChildPositions","getSelectedRectangle","selected","child","xStart","xEnd","yStart","yEnd","draw","drawingParams","canvas","document","getElementById","ctx","getContext","clearRect","beginPath","rect","fillStyle","strokeStyle","lineWidth","closePath","root","maxLevel","selectedLevel","App","gameGenerated","className","Container","maxWidth","Button","variant","onClick","generateRandomTree","split","getDrawingParams","Typography","id","gutterBottom","Slider","defaultValue","aria-labelledby","step","marks","valueLabelDisplay","onChange","e","val","style","backgroundColor","currentTarget","getBoundingClientRect","clientX","left","clientY","top","ButtonGroup","aria-label","rotate","swap","smash","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2068d169.chunk.js","sourcesContent":["class Rectangle {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.size = width;\n    }\n}\n\nexport default Rectangle;","import Rectangle from './Rectangle';\n\nclass Quadtree {\n\n    constructor(level, maxLevels = 0, bounds = null,  colorList = [], parent = null) {\n        this.level = level;\n\n        function getRandomInt(min, max) {\n            min = Math.ceil(min);\n            max = Math.floor(max);\n            return Math.floor(Math.random() * (max - min)) + min; \n        }\n\n        this.color = colorList[getRandomInt(0, colorList.length)];\n        this.maxLevels = maxLevels;\n        this.bounds = bounds;\n\n        this.parent = parent;\n\n        this.highlighted = false;\n\n        this.children = [];\n\n        this.colorList = colorList\n\n    }\n\n    split() {\n        if (this.children.length !== 0 || this.level === this.maxLevels) return;\n        const size = this.bounds.size / 2;\n        const x = this.bounds.x;\n        const y = this.bounds.y;\n\n        this.color = null;\n       \n        this.children[0] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x + size, y, size       ), this.colorList, this);\n        this.children[1] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x, y, size              ), this.colorList, this);\n        this.children[2] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x, y + size, size       ), this.colorList, this);\n        this.children[3] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x + size, y + size, size), this.colorList, this);\n    }\n\n    smash() {\n        if (this.level === 0 || this.level === this.maxLevels) return;\n        const size = this.bounds.size / 2;\n        const x = this.bounds.x;\n        const y = this.bounds.y;\n\n        this.color = null;\n       \n        this.children[0] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x + size, y, size       ), this.colorList, this);\n        this.children[1] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x, y, size              ), this.colorList, this);\n        this.children[2] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x, y + size, size       ), this.colorList, this);\n        this.children[3] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x + size, y + size, size), this.colorList, this);\n\n    }\n\n    swap(direction) {\n        \n        var node = this;\n            if (node.children.length === 0) return;\n\n           \n            //horizontally\n            if (direction === 1) {\n                this.swapNodes(node.children[0], node.children[3]);\n                this.swapNodes(node.children[1], node.children[2]);\n\n            } \n            //vertically\n            else if (direction === 0) {\n\n                this.swapNodes(node.children[1], node.children[0]);\n                this.swapNodes(node.children[2], node.children[3]);\n            }\n    }\n    swapNodes(child1, child2) {\n\n        var tmp0 = child1;\n        var tmp0pos = {x : child1.bounds.x, y: child1.bounds.y}\n        var tmp3 = child2;\n        var tmp3pos = {x : child2.bounds.x, y: child2.bounds.y}\n\n        child1 = tmp3;\n        child2 = tmp0;\n\n        child1.updatePositions.call(child1, tmp0pos.x, tmp0pos.y);\n        child2.updatePositions.call(child2, tmp3pos.x, tmp3pos.y);\n    }\n\n    rotate(direction) {\n        var node = this;\n        if (node.children.length === 0) return;\n       \n        //clockwise\n        if (direction === 1) {\n            this.swapNodes(node.children[0], node.children[3]);\n            this.swapNodes(node.children[3], node.children[2]);\n            this.swapNodes(node.children[2], node.children[1]);\n         } \n         //counterclockwise\n         else if (direction === 0) {\n            this.swapNodes(node.children[0], node.children[1]);\n            this.swapNodes(node.children[1], node.children[2]);\n            this.swapNodes(node.children[2], node.children[3]);\n         }\n    }\n\n    getDrawingParams() {\n        \n        var params = [];\n\n        var getChildParams = function(node){\n            if (node.children.length == 0) {\n                params.push({bounds: node.bounds, fill: node.color, stroke: {color:\"#000000\", width: 1} });\n            } else {\n                node.children.forEach( (el) => {\n                    getChildParams(el);\n\n                });\n                \n            }\n            if (node.highlighted) {\n                params.push({bounds: node.bounds, stroke: {color:\"#FFFFFF\", width: 5} });\n\n            }\n        }\n\n        getChildParams(this);\n        return params;\n    }\n\n    updatePositions(x, y) {\n        this.bounds.x = x;\n        this.bounds.y = y;\n\n        const updateChildPositions = (node, x, y) => {\n                if (node.children.length != 0) {\n                    let size = node.bounds.size / 2;\n                    \n                    node.children[0].bounds = new Rectangle( x + size, y, size);\n                    updateChildPositions(node.children[0], node.children[0].bounds.x, node.children[0].bounds.y);\n                    node.children[1].bounds = new Rectangle( x, y, size);\n                    updateChildPositions(node.children[1], node.children[1].bounds.x, node.children[1].bounds.y);\n                    node.children[2].bounds = new Rectangle( x , y + size, size);\n                    updateChildPositions(node.children[2], node.children[2].bounds.x, node.children[2].bounds.y);\n                    node.children[3].bounds = new Rectangle( x + size, y + size, size);\n                    updateChildPositions(node.children[3], node.children[3].bounds.x, node.children[3].bounds.y);\n                }\n        }\n\n        updateChildPositions(this, x, y)\n\n    }\n\n    getSelectedRectangle(x, y, level) {\n\n        const getSelectedRectangle = (node) => {\n            if (node.level == level || node.children.length == 0) {\n                return node;\n            }\n\n            let selected = null;\n            node.children.forEach((child) => {\n                var xStart = child.bounds.x;\n                var xEnd = child.bounds.x + child.bounds.size;\n                var yStart = child.bounds.y;\n                var yEnd = child.bounds.y + child.bounds.size;\n                if (x >= xStart && x <= xEnd && y >= yStart && y <= yEnd) {\n                    selected = getSelectedRectangle(child);\n                }\n           });\n           return selected;\n        }\n        \n       return getSelectedRectangle(this);\n    }\n}\n\nexport default Quadtree;","import './App.css';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Grid from '@material-ui/core/Grid';\nimport { Container } from '@material-ui/core';\nimport Quadtree from './models/Quadtree';\nimport Rectangle from './models/Rectangle';\nimport PropTypes from 'prop-types'\n\n\nconst draw = (drawingParams) => {\n  const canvas = document.getElementById('canvas');\n  var ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  drawingParams.forEach((el) => {\n    let bounds = el.bounds;\n    ctx.beginPath();\n\n    ctx.rect(bounds.x, bounds.y, bounds.size, bounds.size);\n    if (el.fill) {\n      ctx.fillStyle = el.fill;\n      ctx.fill();\n    }\n    if (el.stroke) {\n      ctx.strokeStyle = el.stroke.color;\n      ctx.lineWidth = el.stroke.width;\n      ctx.stroke();\n    }\n    ctx.closePath();\n  });\n}\n\nlet root = null;\nlet selected = null;\nlet maxLevel = 5;\nlet selectedLevel = 0;\n\nfunction App({gameGenerated}) {\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <Button \n          variant=\"contained\" \n          color=\"primary\" \n          onClick={()=> {\n            root = new Quadtree(0, maxLevel, new Rectangle(0, 0, 400), [\"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\"]);\n\n            const generateRandomTree = function(level, node) {\n                    if (level > 0) {\n                      node.split();\n                      node.children.forEach( node => {\n                        if (Math.random() >= 0.5) {\n                          generateRandomTree(level - 1, node);\n                        }\n                      })\n                    }\n            }\n                \n            generateRandomTree(maxLevel, root);\n\n            draw(root.getDrawingParams())\n            gameGenerated = true;\n            }}>\n            \n            New Game\n          </Button>\n        <Typography id=\"select-max-level\" gutterBottom>\n          Max level\n        </Typography>\n        <Slider\n          defaultValue={5}\n          aria-labelledby=\"select-max-level\"\n          step={1}\n          marks\n          min={1}\n          max={9}\n          valueLabelDisplay=\"on\"\n          onChange={(e, val)=>{\n            maxLevel = val;\n          }}\n        />\n\n        <div id=\"scene\"> \n            <canvas \n            id=\"canvas\" \n            width=\"400\" \n            height=\"400\"\n            style={{backgroundColor: \"whitesmoke\"}}\n            onClick={(e) => {\n                if (!root) {\n                  return\n                }\n                let rect = e.currentTarget.getBoundingClientRect();\n                let x = e.clientX - rect.left;\n                let y = e.clientY - rect.top;\n                if (selected) {\n                  selected.highlighted = false;\n                }\n                selected = root.getSelectedRectangle(x, y, selectedLevel);\n                selected.highlighted = true;\n                draw(root.getDrawingParams());\n            }}></canvas>\n          </div>\n       <Typography id=\"select-action-level\" gutterBottom>\n          Select level\n        </Typography>\n        <Slider\n          defaultValue={5}\n          aria-labelledby=\"select-action-level\"\n          step={1}\n          marks\n          min={0}\n          max={maxLevel}\n          valueLabelDisplay=\"on\"\n          onChange={(e, val)=>{\n            selectedLevel = val;\n          }}\n        />\n\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button \n          onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.rotate(1);\n            draw(root.getDrawingParams());\n          }}>\n            Rotate clockwise\n          </Button>\n          <Button\n          onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.rotate(0);\n            draw(root.getDrawingParams());\n          }}>\n            Rotate counterclockwise\n          </Button>\n        </ButtonGroup>\n        \n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.swap(1);\n            draw(root.getDrawingParams());\n          }}>\n            Swap horizontally\n          </Button>\n          <Button  onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.swap(0);\n            draw(root.getDrawingParams());\n          }}>\n            Swap vertically\n          </Button>\n        </ButtonGroup>\n\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.smash();\n            draw(root.getDrawingParams());\n          }}>\n            Smash \n          </Button>\n         \n        </ButtonGroup>\n        </Container>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  gameGenerated: PropTypes.bool\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import { Provider } from 'react-redux'\n// import { createStore } from 'redux'\n// import rootReducer from './reducers'\n\n// const store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <App />\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}