{"version":3,"sources":["models/Rectangle.js","models/Quadtree.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","x","y","width","height","this","size","Quadtree","level","maxLevels","bounds","color","highlighted","children","direction","length","swapNodes","child1","child2","tmp0","tmp0pos","tmp3","tmp3pos","updatePositions","call","params","getChildParams","node","push","fill","stroke","forEach","el","updateChildPositions","getSelectedRectangle","selected","child","xStart","xEnd","yStart","yEnd","App","useState","gameInit","setGameInit","maxLevel","setMaxLevel","selectedLevel","setSelectedLevel","root","setRoot","colorList","getRandomInt","min","max","Math","ceil","floor","random","draw","drawingParams","canvas","document","getElementById","ctx","getContext","clearRect","beginPath","rect","fillStyle","strokeStyle","lineWidth","closePath","className","Button","style","marginBottom","variant","onClick","generateRandomTree","getDrawingParams","Typography","id","gutterBottom","Slider","defaultValue","aria-labelledby","step","marks","valueLabelDisplay","onChange","e","val","backgroundColor","currentTarget","getBoundingClientRect","clientX","left","clientY","top","ButtonGroup","aria-label","rotate","swap","smash","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.010b5286.chunk.js","sourcesContent":["class Rectangle {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.size = width;\n    }\n}\n\nexport default Rectangle;","import Rectangle from './Rectangle';\n\nclass Quadtree {\n\n    constructor(level, maxLevels = 0, bounds = null,  color = null) {\n        this.level = level;\n\n        \n\n        this.color = color;\n        this.maxLevels = maxLevels;\n        this.bounds = bounds;\n\n        this.highlighted = false;\n\n        this.children = [];\n\n    }\n    smash() {\n        if (this.level === 0 || this.level === this.maxLevels) return false;\n        const size = this.bounds.size / 2;\n        const x = this.bounds.x;\n        const y = this.bounds.y;\n\n        this.color = null;\n       \n        this.children[0] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x + size, y, size       ));\n        this.children[1] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x, y, size              ));\n        this.children[2] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x, y + size, size       ));\n        this.children[3] = new Quadtree(this.level + 1, this.maxLevels, new Rectangle(x + size, y + size, size));\n        return true;\n    }\n\n    swap(direction) {\n        \n        var node = this;\n            if (node.children.length === 0) return;\n\n           \n            //horizontally\n            if (direction === 1) {\n                this.swapNodes(node.children[0], node.children[3]);\n                this.swapNodes(node.children[1], node.children[2]);\n\n            } \n            //vertically\n            else if (direction === 0) {\n\n                this.swapNodes(node.children[1], node.children[0]);\n                this.swapNodes(node.children[2], node.children[3]);\n            }\n    }\n    swapNodes(child1, child2) {\n\n        var tmp0 = child1;\n        var tmp0pos = {x : child1.bounds.x, y: child1.bounds.y}\n        var tmp3 = child2;\n        var tmp3pos = {x : child2.bounds.x, y: child2.bounds.y}\n\n        child1 = tmp3;\n        child2 = tmp0;\n\n        child1.updatePositions.call(child1, tmp0pos.x, tmp0pos.y);\n        child2.updatePositions.call(child2, tmp3pos.x, tmp3pos.y);\n    }\n\n    rotate(direction) {\n        var node = this;\n        if (node.children.length === 0) return;\n       \n        //clockwise\n        if (direction === 1) {\n            this.swapNodes(node.children[0], node.children[3]);\n            this.swapNodes(node.children[3], node.children[2]);\n            this.swapNodes(node.children[2], node.children[1]);\n         } \n         //counterclockwise\n         else if (direction === 0) {\n            this.swapNodes(node.children[0], node.children[1]);\n            this.swapNodes(node.children[1], node.children[2]);\n            this.swapNodes(node.children[2], node.children[3]);\n         }\n    }\n\n    getDrawingParams() {\n        \n        var params = [];\n\n        var getChildParams = function(node){\n            if (node.children.length == 0) {\n                params.push({bounds: node.bounds, fill: node.color, stroke: {color:\"#000000\", width: 1} });\n            } else {\n                node.children.forEach( (el) => {\n                    getChildParams(el);\n\n                });\n                \n            }\n            if (node.highlighted) {\n                params.push({bounds: node.bounds, stroke: {color:\"#FFFFFF\", width: 5} });\n\n            }\n        }\n\n        getChildParams(this);\n        return params;\n    }\n\n    updatePositions(x, y) {\n        this.bounds.x = x;\n        this.bounds.y = y;\n\n        const updateChildPositions = (node, x, y) => {\n                if (node.children.length != 0) {\n                    let size = node.bounds.size / 2;\n                    \n                    node.children[0].bounds = new Rectangle( x + size, y, size);\n                    updateChildPositions(node.children[0], node.children[0].bounds.x, node.children[0].bounds.y);\n                    node.children[1].bounds = new Rectangle( x, y, size);\n                    updateChildPositions(node.children[1], node.children[1].bounds.x, node.children[1].bounds.y);\n                    node.children[2].bounds = new Rectangle( x , y + size, size);\n                    updateChildPositions(node.children[2], node.children[2].bounds.x, node.children[2].bounds.y);\n                    node.children[3].bounds = new Rectangle( x + size, y + size, size);\n                    updateChildPositions(node.children[3], node.children[3].bounds.x, node.children[3].bounds.y);\n                }\n        }\n\n        updateChildPositions(this, x, y)\n\n    }\n\n    getSelectedRectangle(x, y, level) {\n\n        const getSelectedRectangle = (node) => {\n            if (node.level == level || node.children.length == 0) {\n                return node;\n            }\n\n            let selected = null;\n            node.children.forEach((child) => {\n                var xStart = child.bounds.x;\n                var xEnd = child.bounds.x + child.bounds.size;\n                var yStart = child.bounds.y;\n                var yEnd = child.bounds.y + child.bounds.size;\n                if (x >= xStart && x <= xEnd && y >= yStart && y <= yEnd) {\n                    selected = getSelectedRectangle(child);\n                }\n           });\n           return selected;\n        }\n        \n       return getSelectedRectangle(this);\n    }\n}\n\nexport default Quadtree;","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Quadtree from './models/Quadtree';\nimport Rectangle from './models/Rectangle';\n\nlet selected = null;\n\nfunction App() {\n\n  const [gameInit, setGameInit] = useState(false)\n  const [maxLevel, setMaxLevel] = useState(5)\n  const [selectedLevel, setSelectedLevel] = useState(0)\n  const [root, setRoot] = useState(null);\n  const colorList = [\"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FFFF00\"];\n  const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; \n  }\n  const draw = (drawingParams) => {\n    const canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n  \n    drawingParams.forEach((el) => {\n      let bounds = el.bounds;\n      ctx.beginPath();\n  \n      ctx.rect(bounds.x, bounds.y, bounds.size, bounds.size);\n      if (el.fill) {\n        ctx.fillStyle = el.fill;\n        ctx.fill();\n      }\n      if (el.stroke) {\n        ctx.strokeStyle = el.stroke.color;\n        ctx.lineWidth = el.stroke.width;\n        ctx.stroke();\n      }\n      ctx.closePath();\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"TopPanel\">\n        <Button \n          style={{marginBottom: '2em'}}\n          variant=\"contained\" \n          color=\"primary\" \n          onClick={()=> {\n           \n            const root = new Quadtree(0, maxLevel, new Rectangle(0, 0, 400), colorList[getRandomInt(0, colorList.length)]);\n            setRoot(root);\n            const generateRandomTree = function(level, node) {\n                    if (level > 0) {\n                      const size = node.bounds.size / 2;\n                      const x = node.bounds.x;\n                      const y = node.bounds.y;\n                      node.children[0] = new Quadtree(node.level + 1, node.maxLevels, new Rectangle(x + size, y, size       ), colorList[getRandomInt(0, colorList.length)]);\n                      node.children[1] = new Quadtree(node.level + 1, node.maxLevels, new Rectangle(x, y, size              ), colorList[getRandomInt(0, colorList.length)]);\n                      node.children[2] = new Quadtree(node.level + 1, node.maxLevels, new Rectangle(x, y + size, size       ), colorList[getRandomInt(0, colorList.length)]);\n                      node.children[3] = new Quadtree(node.level + 1, node.maxLevels, new Rectangle(x + size, y + size, size), colorList[getRandomInt(0, colorList.length)]);\n              \n                      node.children.forEach( node => {\n                        if (Math.random() >= 0.5) {\n                          generateRandomTree(level - 1, node);\n                        }\n                      })\n                    }\n            }\n                \n            generateRandomTree(maxLevel, root);\n\n            draw(root.getDrawingParams())\n            setGameInit(true);\n            }}>\n            New Game\n          </Button>\n        <Typography id=\"select-max-level\" gutterBottom>\n          Max level\n        </Typography>\n        <Slider\n          color=\"primary\"\n          defaultValue={5}\n          aria-labelledby=\"select-max-level\"\n          step={1}\n          marks\n          min={1}\n          max={9}\n          valueLabelDisplay=\"auto\"\n          onChange={(e, val)=>{\n            setMaxLevel(val);\n          }}\n        /></div>\n      <div className=\"Content\">\n        <div id=\"scene\"> \n        <canvas \n        id=\"canvas\" \n        width=\"400\" \n        height=\"400\"\n        style={{backgroundColor: \"whitesmoke\"}}\n        onClick={(e) => {\n            if (!root) {\n              return\n            }\n            let rect = e.currentTarget.getBoundingClientRect();\n            let x = e.clientX - rect.left;\n            let y = e.clientY - rect.top;\n            if (selected) {\n              selected.highlighted = false;\n            }\n            selected = root.getSelectedRectangle(x, y, selectedLevel);\n            selected.highlighted = true;\n            draw(root.getDrawingParams());\n        }}></canvas>\n      </div>\n        { gameInit && (\n            <div className=\"ControlsContainer\">\n              \n       <Typography id=\"select-action-level\" gutterBottom>\n          Select level\n        </Typography>\n        <Slider\n          defaultValue={0}\n          aria-labelledby=\"select-action-level\"\n          step={1}\n          marks\n          min={0}\n          max={maxLevel}\n          valueLabelDisplay=\"on\"\n          onChange={(e, val)=>{\n            setSelectedLevel(val);\n          }}\n        />\n\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\"  style={{marginBottom: '2em'}}>\n          <Button \n          onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.rotate(1);\n            draw(root.getDrawingParams());\n          }}>\n            Rotate clockwise\n          </Button>\n          <Button\n          onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.rotate(0);\n            draw(root.getDrawingParams());\n          }}>\n            Rotate counterclockwise\n          </Button>\n        </ButtonGroup>\n        \n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\"  style={{marginBottom: '2em'}}>\n          <Button onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.swap(1);\n            draw(root.getDrawingParams());\n          }}>\n            Swap horizontally\n          </Button>\n          <Button  onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.swap(0);\n            draw(root.getDrawingParams());\n          }}>\n            Swap vertically\n          </Button>\n        </ButtonGroup>\n\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\"  style={{marginBottom: '2em'}}>\n          <Button onClick={()=>{\n            if (selected == null) {\n              return;\n            }\n            selected.smash();\n            selected.children.forEach((child) => {\n              child.color = colorList[getRandomInt(0, colorList.length)];\n            })\n            draw(root.getDrawingParams());\n          }}>\n            Smash \n          </Button>\n         \n        </ButtonGroup>\n            </div>\n          )\n        }\n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}